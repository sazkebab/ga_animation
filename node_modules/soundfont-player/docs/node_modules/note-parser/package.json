{
  "name": "note-parser",
  "version": "2.0.0",
  "description": "Parse music notes in scientific notation",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "api": "jsdoc2md index.js > API.md",
    "prepublish": "npm test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danigb/note-parser.git"
  },
  "keywords": [
    "note",
    "parse",
    "parser",
    "midi",
    "scientific",
    "notation",
    "frequency"
  ],
  "author": {
    "name": "danigb",
    "email": "danigb@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danigb/note-parser/issues"
  },
  "homepage": "https://github.com/danigb/note-parser#readme",
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "# note-parser [![npm](https://img.shields.io/npm/v/note-parser.svg)](https://www.npmjs.com/package/note-parser)\n\n[![Build Status](https://travis-ci.org/danigb/note-parser.svg?branch=master)](https://travis-ci.org/danigb/note-parser) [![Code Climate](https://codeclimate.com/github/danigb/note-parser/badges/gpa.svg)](https://codeclimate.com/github/danigb/note-parser)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\nParse note names (in [scientific notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation)) with javascript. Given a string, obtain a hash\nwith note properties (including midi number and frequency)\n\nIf you need parse interval names take a look to [interval-notation](https://github.com/danigb/interval-notation)\n\n## Usage\n\nInstall via npm: `npm i --save note-parser` and require it:\n\n```js\nvar parser = require('note-parser')\nparser.parse('c#4') // => { letter: 'C', acc: '#', ... midi: 61, freq: 277.1826309768721 }\n```\n\nThe returned object will contain:\n\n- `letter`: the uppercase letter of the note\n- `acc`: the accidentals of the note (only sharps or flats)\n- `pc`: the pitch class (letter + acc)\n- `step`: s a numeric representation of the letter. It's an integer from 0 to 6 where 0 = C, 1 = D ... 6 = B\n- `alt`: a numeric representation of the accidentals. 0 means no alteration,\npositive numbers are for sharps and negative for flats\n- `chroma`: a numeric representation of the pitch class. It's like midi for\npitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.\n\nIf the note name has octave, the returned object will additionally have:\n\n- `oct`: the octave number (as integer)\n- `midi`: the midi number\n- `freq`: the frequency (using tuning parameter as base)\n\nIf the parameter `isTonic` is set to true another property is included:\n\n- `tonicOf`: the rest of the string that follows note name (left and right trimmed)  \n\n#### Midi note number and frequency\n\nIf you are interested only in midi numbers or frequencies, you can use `midi` function:\n\n```js\nparser.midi('A4') // => 69\nparser.midi('blah') // => null\nparser.midi(60) // => 60\nparser.midi('60') // => 60\n```\n\nor the `freq` function:\n\n```js\nparser.freq('A4') // => 440\nparser.freq('A3', 444) // => 222\nparser.freq(69) // => 440\n```\n\n### Build the string back\n\nWith the `build` function you can convert back to string:\n\n```js\nparser.build(parser.parse('cb2')) // => 'Cb2'\n```\n\nAlternatively the `build` function accepts `step, alteration, octave` parameters:\n\n```js\nparser.build(3, -2, 4) // => 'Fbb4'\n```\n\n##Â Tests and documentation\n\nYou can read the [generated API documentation here](https://github.com/danigb/note-parser/blob/master/API.md)\n\nTo run the test clone this repo and:\n\n```\nnpm install\nnpm test\n```\n\n## License\n\nMIT License\n",
  "readmeFilename": "README.md",
  "gitHead": "89fe988f3074a1826ca0ca20364ac7abb767541c",
  "_id": "note-parser@2.0.0",
  "_shasum": "0dbe08f93ad9a44d2448adeff3dba572e3161c1b",
  "_from": "note-parser@*"
}
